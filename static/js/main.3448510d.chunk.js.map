{"version":3,"sources":["atoms/Background/styled.js","assets/images/backgroundImage.png","atoms/Background/index.js","molecules/Form/styled.js","atoms/FieldSet/styled.js","atoms/FieldSet/index.js","atoms/Button/styled.js","atoms/Button/index.js","slices/inputAdressesSlice.js","molecules/Form/index.js","pages/FormPage/index.js","organisms/Table/styled.js","molecules/TableHead/styled.js","slices/outputWalletsSlice.js","molecules/TableHead/index.js","molecules/TableHead/usePrevious.js","molecules/TableBody/styled.js","molecules/TableBody/index.js","organisms/Table/index.js","pages/TablePage/index.js","App.js","theme/GlobalStyle.js","helpers/apiClient.js","sagas/validationSaga.js","sagas/fetchWalletsSaga.js","sagas/rootSaga.js","store.js","index.js","theme/theme.js"],"names":["BackgroundImage","styled","div","backgroundURL","BackgroundFilter","theme","colors","filter","Background","children","backgroundImage","StyledForm","form","formBorder","ButtonsSection","FieldSetWrapper","StyledFieldSet","withStyles","root","margin","width","color","fontSize","display","borderColor","borderRadius","TextField","RemoveCircle","RemoveCircleIcon","FieldSet","labelName","removePossibility","onChange","value","onRemove","error","errorMessage","helperText","label","variant","placeholder","IconButton","onClick","style","visibility","StyledButton","padding","Button","startIcon","inputAddressesSlice","createSlice","name","initialState","inputAddresses","id","address","removable","validationResult","validationMessage","validationComplete","reducers","addAddress","state","length","push","changeAddress","payload","find","removeAddress","resetAddresses","validationStart","validationMake","setValidationComplete","selectAddressState","selectAddressesValidationComplete","actions","Form","dispatch","useDispatch","useSelector","className","noValidate","autoComplete","map","event","target","onInputChange","to","FormPage","StyledTable","table","tableCellText","Title","caption","tableTitle","TableWrapper","section","StyledHeadCell","th","tableHeadCell","StyledHeadCellWrapper","SortButton","button","tableHeadText","sorted","css","breakPoints","tabletBreakPoint","FilterInput","input","FilterListButton","FilterListIcon","outputWalletsSlice","wallets","filteredWallets","loading","sortConfig","fetchWallets","fetchWalletSuccess","wallet","sortWallets","sort","a","b","key","direction","filterWallets","filterConfig","myDate","Date","toLocaleDateString","includes","content","toString","resetWallets","selectSortConfig","selectFilteredWallets","TableHead","sortByAddress","sortByBalance","sortByCreateTime","sortByLastOperation","useState","filterBy","setFilterConfig","prevFilterBy","ref","useRef","useEffect","current","usePrevious","filterConfigHandling","prevState","filterWalletsHandling","undefined","icon","faSortDown","faSortUp","StyledCell","td","tableCell","TableBody","getMyDateString","index","balance","create_time","latest_opration_time","Table","history","useHistory","requestSort","position","top","left","height","replace","TablePage","App","basename","path","GlobalStyle","createGlobalStyle","validateWithAPI","myHeaders","Headers","append","raw","JSON","stringify","requestOptions","method","headers","body","redirect","fetch","response","ok","Error","statusText","json","jsonResponse","console","getWalletDetailsWithAPI","validationHandler","validationSaga","select","addresses","call","validate","put","result","message","f","addressesAfterValidationMake","validationCompleteChecker","adresses","every","takeLatest","type","fetchWalletsHandler","fetchWalletsSaga","walletDetails","rootSaga","all","sagaMiddleware","createSaga","store","configureStore","reducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3448510d.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const BackgroundImage = styled.div`\r\n    min-height: 100vh;\r\n    background: url(${({ backgroundURL }) => backgroundURL});\r\n    background-repeat: no-repeat;\r\n    background-size: cover;\r\n    background-position: center;\r\n`;\r\n\r\nexport const BackgroundFilter = styled.div`\r\n    padding: 50px 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 100vh;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: ${({theme})=>theme.colors.filter};\r\n    `;\r\n","export default __webpack_public_path__ + \"static/media/backgroundImage.d123bd88.png\";","import React from \"react\";\r\nimport { BackgroundFilter, BackgroundImage } from \"./styled\";\r\nimport backgroundImage from \"../../assets/images/backgroundImage.png\";\r\n\r\nconst Background = ({ children }) => {\r\n    return (\r\n        <BackgroundImage backgroundURL={backgroundImage}>\r\n            <BackgroundFilter>\r\n                {children}\r\n            </BackgroundFilter>\r\n        </BackgroundImage>\r\n    )\r\n};\r\n\r\nexport default Background;","import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: rgba(26, 33, 45, 0.8);\r\n    border: 1px solid ${({theme})=>theme.colors.formBorder};\r\n    border-radius: 20px;\r\n    padding: 30px;\r\n`;\r\n\r\nexport const ButtonsSection = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n`;","import styled from \"styled-components\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport RemoveCircleIcon from \"@material-ui/icons/RemoveCircleTwoTone\";\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport const FieldSetWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    width: 100%;\r\n`;\r\n\r\nexport const StyledFieldSet = withStyles({\r\n    root: {\r\n        margin: 10,\r\n        width: \"100%\",\r\n\r\n        '& input': {\r\n            color: 'white',\r\n            fontSize: 16,\r\n            display: 'block',\r\n        },\r\n\r\n        '& label': {\r\n            color: \"gray\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'hsl(297, 34%, 67%)',\r\n        },\r\n\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'hsl(297, 34%, 57%)',\r\n                borderRadius: 40,\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'hsl(297, 34%, 67%)',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'hsl(297, 34%, 67%)',\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nexport const RemoveCircle = withStyles({\r\n    root: {\r\n        color: \"red\",\r\n    }\r\n})(RemoveCircleIcon);\r\n\r\n","import React from \"react\";\r\nimport { StyledFieldSet, FieldSetWrapper, RemoveCircle } from \"./styled\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst FieldSet = ({ labelName, removePossibility, onChange, value, onRemove, error, errorMessage }) => {\r\n\r\n    // error and helperText props here are for validation - error indicate error itself and helper text give error message\r\n\r\n    // removePossibility props give FieldSet component chance to remove itself from form - first input in form shouldn't \r\n    // has that functionality \r\n\r\n    return (\r\n        <FieldSetWrapper>\r\n            <StyledFieldSet\r\n                error={error}\r\n                helperText={errorMessage}\r\n                value={value}\r\n                onChange={onChange}\r\n                label={labelName}\r\n                variant=\"outlined\"\r\n                placeholder=\"enter TRON addres...\"\r\n            />\r\n            <IconButton onClick={onRemove} style={{ visibility: `${!removePossibility && 'hidden'}` }}>\r\n                <RemoveCircle />\r\n            </IconButton>\r\n        </FieldSetWrapper>\r\n    );\r\n};\r\n\r\nexport default FieldSet;","import Button from '@material-ui/core/Button';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport const StyledButton = withStyles({\r\n    root: {\r\n        margin: 10,\r\n        padding: 10,\r\n        color: \"hsl(192, 72%, 50%)\",\r\n        borderColor: \"hsl(192, 72%, 50%)\",\r\n        borderRadius: 20,\r\n\r\n        '&:hover': {\r\n            color: \"hsl(192, 72%, 65%)\",\r\n            borderColor: \"hsl(192, 72%, 65%)\",\r\n        },\r\n\r\n        '&:active': {\r\n            color: \"hsl(192, 72%, 80%)\",\r\n            borderColor: \"hsl(192, 72%, 80%)\",\r\n        }\r\n    },\r\n})(Button);","import React from \"react\";\r\nimport { StyledButton } from \"./styled\";\r\n\r\nconst Button = ({ children, onClick, startIcon, style }) => {\r\n\r\n    // props startIcon here is for Material-UI Icon component usage\r\n    \r\n    return (\r\n        <StyledButton\r\n            style={style}\r\n            variant=\"outlined\"\r\n            startIcon={startIcon ? startIcon : null}\r\n            onClick={onClick}\r\n        >\r\n            {children}\r\n        </StyledButton>\r\n    );\r\n};\r\n\r\nexport default Button;","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst inputAddressesSlice = createSlice({\r\n    name: \"inputAddresses\",\r\n    initialState: {\r\n        inputAddresses:\r\n            [\r\n                {\r\n                    id: 0,\r\n                    address: \"\",\r\n                    removable: false,\r\n                    validationResult: null,\r\n                    validationMessage: null,\r\n                },\r\n            ],\r\n\r\n        validationComplete: false,\r\n    },\r\n    reducers: {\r\n        addAddress: state => {\r\n            const id = state.inputAddresses[state.inputAddresses.length - 1].id + 1;\r\n            state.inputAddresses.push({\r\n                id,\r\n                address: \"\",\r\n                removable: true,\r\n                validationResult: null,\r\n                validationMessage: null,\r\n            })\r\n        },\r\n\r\n        changeAddress: (state, { payload }) => {\r\n            state.inputAddresses.find(address => address.id === payload.id).address = payload.address;\r\n        },\r\n\r\n        removeAddress: (state, { payload: id }) => {\r\n            state.inputAddresses = state.inputAddresses.filter(address => address.id !== id);\r\n        },\r\n\r\n        resetAddresses: state => {\r\n            state.inputAddresses = [\r\n                {\r\n                    id: 0,\r\n                    address: \"\",\r\n                    removable: false,\r\n                    validationResult: null,\r\n                    validationMessage: null,\r\n                },\r\n            ];\r\n\r\n            state.validationComplete = false;\r\n        },\r\n\r\n        validationStart: state => {\r\n\r\n        },\r\n\r\n        validationMake: (state, { payload }) => {\r\n            state.inputAddresses.find(address => address.id === payload.id).validationResult = payload.validationResult;\r\n            state.inputAddresses.find(address => address.id === payload.id).validationMessage = payload.validationMessage;\r\n        },\r\n\r\n        setValidationComplete: state => {\r\n            state.validationComplete = true;\r\n        }\r\n    },\r\n});\r\n\r\nexport const selectAddressState = state => state.inputAddresses.inputAddresses;\r\nexport const selectAddressesValidationComplete = state => state.inputAddresses.validationComplete;\r\n\r\nexport const { addAddress,\r\n    changeAddress,\r\n    removeAddress,\r\n    validationStart,\r\n    validationMake,\r\n    setValidationComplete,\r\n    resetAddresses } = inputAddressesSlice.actions;\r\n\r\nexport default inputAddressesSlice.reducer;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport AddCircleTwoTon from \"@material-ui/icons/AddCircleTwoTone\";\r\nimport GetAppTwoToneIcon from '@material-ui/icons/GetAppTwoTone';\r\nimport { StyledForm, ButtonsSection } from \"./styled\";\r\nimport FieldSet from \"../../atoms/FieldSet\";\r\nimport Button from \"../../atoms/Button\";\r\nimport {\r\n    addAddress,\r\n    changeAddress,\r\n    removeAddress,\r\n    validationStart,\r\n    selectAddressState,\r\n    selectAddressesValidationComplete,\r\n} from \"../../slices/inputAdressesSlice\";\r\n\r\n\r\nconst Form = () => {\r\n    //take variables from libraries and state\r\n\r\n    const dispatch = useDispatch();\r\n    const inputAddresses = useSelector(selectAddressState);\r\n    const validationComplete = useSelector(selectAddressesValidationComplete);\r\n\r\n    // onInputChange dispatch every change of one of inputs to state \r\n\r\n    const onInputChange = (id, event) => {\r\n        dispatch(changeAddress({\r\n            id: id,\r\n            address: event.target.value\r\n        }));\r\n    };\r\n\r\n    // onInputRemove dispatch every remove of input itself to state \r\n\r\n    const onInputRemove = id => {\r\n        dispatch(removeAddress(id));\r\n    };\r\n\r\n    // goToTronTable starts validation of form and when validation is complete it change validationComplete in state to true\r\n    // which redner Redirect in component below to page with table\r\n\r\n    const goToTronTable = () => {\r\n        dispatch(validationStart());\r\n    }\r\n\r\n    return (\r\n        <StyledForm className=\"example\" noValidate autoComplete=\"off\">\r\n            {inputAddresses.map(address => (\r\n                <FieldSet\r\n                    error={address.validationResult === null ? false : !address.validationResult}\r\n                    errorMessage={address.validationResult === false ? address.validationMessage : null}\r\n                    labelName=\"TRON Address\"\r\n                    onChange={event => { onInputChange(address.id, event) }}\r\n                    onRemove={() => onInputRemove(address.id)}\r\n                    key={address.id}\r\n                    placeholder=\"placeholder\"\r\n                    name=\"name\"\r\n                    removePossibility={address.removable}\r\n                />\r\n            ))}\r\n            <ButtonsSection>\r\n                <Button\r\n                    onClick={() => { dispatch(addAddress()) }}\r\n                    startIcon={<AddCircleTwoTon />}\r\n                >\r\n                    Add new address\r\n                    </Button>\r\n                <Button\r\n                    onClick={goToTronTable}\r\n                    startIcon={<GetAppTwoToneIcon />}\r\n                >\r\n                    Download TRONs table\r\n                    </Button>\r\n            </ButtonsSection>\r\n            {validationComplete && <Redirect to=\"/table\" />}\r\n        </StyledForm>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport Background from \"../../atoms/Background\";\r\nimport Form from \"../../molecules/Form\";\r\n\r\nconst FormPage = () => {\r\n    return (\r\n        <Background>\r\n            <Form />\r\n        </Background>\r\n    );\r\n};\r\n\r\nexport default FormPage;","import styled from \"styled-components\";\r\n\r\nexport const StyledTable = styled.table`\r\n    max-width: 1200px;\r\n    background-color: rgba(26, 33, 45, 0.8);\r\n    border: 1px solid #23B6DB;\r\n    border-radius: 20px;\r\n    padding: 30px;\r\n    border-collapse: collapse;\r\n    color: ${({theme})=>theme.colors.tableCellText};\r\n    position: relative;\r\n`;\r\n\r\nexport const Title = styled.caption`\r\n    font-size: 30px;\r\n    margin-bottom: 10px;\r\n    color: ${({theme})=>theme.colors.tableTitle};\r\n`;\r\n\r\nexport const TableWrapper = styled.section`\r\n    overflow-x: auto;\r\n`;","import styled, { css } from \"styled-components\";\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nexport const StyledHeadCell = styled.th`\r\n    border: 1px solid ${({theme})=>theme.colors.tableHeadCell};\r\n    padding: 10px;\r\n    text-align: center;\r\n`;\r\n\r\nexport const StyledHeadCellWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`;\r\n\r\nexport const SortButton = styled.button`\r\n    background-color: unset;\r\n    border: none;\r\n    color: ${({theme})=>theme.colors.tableHeadText};\r\n    opacity: 0;\r\n    transition: all 0.15s ease-in-out;\r\n    cursor: pointer;\r\n\r\n    &:active, &:link, &:visited, &:enabled{\r\n        outline: none;\r\n    }\r\n\r\n   \r\n    ${({ sorted }) => sorted && css`\r\n        opacity: 1;\r\n    `} \r\n`;\r\n\r\nexport const StyledButton = styled.div`\r\n    display: flex;\r\n    cursor: pointer;\r\n    font-size: 20px;\r\n    color: ${({theme})=>theme.colors.tableHeadText};\r\n\r\n    &:hover ${SortButton}{\r\n        opacity: 1;\r\n    }\r\n\r\n    @media(max-width: ${({theme})=>theme.breakPoints.tabletBreakPoint}){\r\n        font-size: 12px;\r\n    }\r\n`;\r\n\r\nexport const FilterInput = styled.input`\r\n    display: block;\r\n    margin: 0 auto;\r\n`;\r\n\r\nexport const FilterListButton = withStyles({\r\n    root: {\r\n        color: \"white\",\r\n    }\r\n})(FilterListIcon);","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst outputWalletsSlice = createSlice({\r\n    name: \"outputWallets\",\r\n    initialState: {\r\n        wallets: [],\r\n        filteredWallets: [],\r\n        error: false,\r\n        loading: false,\r\n        sortConfig: null,\r\n    },\r\n    reducers: {\r\n        fetchWallets: state => {\r\n\r\n        },\r\n\r\n        fetchWalletSuccess: (state, { payload: wallet }) => {\r\n            state.wallets.push(wallet);\r\n            state.filteredWallets.push(wallet);\r\n        },\r\n\r\n        sortWallets: (state, { payload: sortConfig }) => {\r\n            state.sortConfig = sortConfig;\r\n            if (sortConfig !== null) {\r\n                state.filteredWallets.sort((a, b) => {\r\n                    if (a[sortConfig.key] > b[sortConfig.key]) {\r\n                        return sortConfig.direction === 'ascending' ? -1 : 1;\r\n                    }\r\n                    if (a[sortConfig.key] < b[sortConfig.key]) {\r\n                        return sortConfig.direction === 'ascending' ? 1 : -1;\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n        },\r\n\r\n        filterWallets: (state, { payload: filterConfig }) => {\r\n            const getMyDateString = (myDate) => {\r\n                const date = new Date(myDate);\r\n                return date.toLocaleDateString();\r\n            };\r\n\r\n            if (filterConfig.key === \"create_time\" || filterConfig.key === \"latest_opration_time\") {\r\n                state.filteredWallets = state.wallets.filter(wallet =>\r\n                    getMyDateString(wallet[filterConfig.key]).includes(filterConfig.content.toString())\r\n                );\r\n            } else {\r\n                state.filteredWallets = state.wallets.filter(wallet =>\r\n                    wallet[filterConfig.key].toString().includes(filterConfig.content)\r\n                );\r\n            };\r\n\r\n        },\r\n\r\n        resetWallets: state => {\r\n            state.wallets = [];\r\n            state.filteredWallets = [];\r\n        },\r\n\r\n    },\r\n});\r\n\r\nexport const selectWallets = state => state.wallets.wallets;\r\nexport const selectSortConfig = state => state.wallets.sortConfig;\r\nexport const selectFilteredWallets = state => state.wallets.filteredWallets;\r\nexport const { fetchWallets,\r\n    fetchWalletSuccess,\r\n    sortWallets,\r\n    filterWallets,\r\n    resetWallets,\r\n} = outputWalletsSlice.actions;\r\n\r\nexport default outputWalletsSlice.reducer;","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { faSortDown, faSortUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { StyledHeadCell, StyledButton, SortButton, FilterInput, StyledHeadCellWrapper, FilterListButton } from \"./styled\";\r\nimport { selectSortConfig, filterWallets, sortWallets } from \"../../slices/outputWalletsSlice\"\r\nimport { usePrevious } from \"./usePrevious\";\r\n\r\nconst TableHead = ({ sortByAddress, sortByBalance, sortByCreateTime, sortByLastOperation }) => {\r\n    //take variables from libraries and state\r\n\r\n    const dispatch = useDispatch();\r\n    const sortConfig = useSelector(selectSortConfig);\r\n\r\n    //defined of filterConfig state variable which should be use to hold filter configuration parameters\r\n    //filter indicates if filtering is on or off; filterBy indicates by which wallets has been filtering\r\n\r\n    const [filterConfig, setFilterConfig] = useState({\r\n        filter: null,\r\n        filterBy: null\r\n    });\r\n\r\n    //prevFilterBy give previous value of filterBy from filterConfig\r\n\r\n    const prevFilterBy = usePrevious(filterConfig.filterBy);\r\n\r\n    //filterConfigHandling - define handlig of filterConfig change, it should toggle filter when we want to\r\n    //turn off or turn on filtering in one TRON table columns, but when we change filtering from one column\r\n    //to another it should set filter to true and in every case filterBy should be set to key by which we\r\n    //want to filter\r\n\r\n    const filterConfigHandling = key => {\r\n        setFilterConfig(prevState => {\r\n            if (prevState.filterBy === key) {\r\n                return ({\r\n                    filter: !prevState.filter,\r\n                    filterBy: key,\r\n                })\r\n            } else {\r\n                return ({\r\n                    filter: true,\r\n                    filterBy: key,\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    //filterWalletsHandling - define handlig of filtering, when we put something into filter input.\r\n    //It passes key (by which we filter) and content (what we have in filter input) to filterWallets method\r\n    //in reducer. Moreover if we filter with sorting on - on every filter wallets have been sorted\r\n\r\n    const filterWalletsHandling = (key, content) => {\r\n        dispatch(filterWallets({\r\n            key: key,\r\n            content: content\r\n        }))\r\n\r\n        if (sortConfig) {\r\n            dispatch(sortWallets(sortConfig))\r\n        }\r\n    };\r\n\r\n    //this useEffect handles filter clealning when we turn off filtering or when we change filter column from one to another\r\n\r\n    useEffect(() => {\r\n        if ((!filterConfig.filter && filterConfig.filter !== null)) {\r\n            filterWalletsHandling(prevFilterBy, \"\")\r\n        }\r\n\r\n        if (prevFilterBy !== filterConfig.filterBy && (prevFilterBy !== null && prevFilterBy !== undefined)) {\r\n            filterWalletsHandling(prevFilterBy, \"\")\r\n        }\r\n\r\n    }, [filterConfig.filter, filterConfig.filterBy, prevFilterBy])\r\n\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <StyledHeadCell>\r\n                    Pos.\r\n                </StyledHeadCell>\r\n\r\n                <StyledHeadCell>\r\n                    <StyledHeadCellWrapper>\r\n                        <StyledButton onClick={sortByAddress}>\r\n                            Address\r\n                        <SortButton\r\n                                sorted={sortConfig?.key === \"address\"}\r\n                            >\r\n                                <FontAwesomeIcon\r\n                                    icon={sortConfig?.key === \"address\" && sortConfig?.direction === \"descending\"\r\n                                        ? faSortDown\r\n                                        : faSortUp}\r\n                                />\r\n                            </SortButton>\r\n                        </StyledButton>\r\n                        <IconButton onClick={() => { filterConfigHandling(\"address\") }}>\r\n                            <FilterListButton />\r\n                        </IconButton>\r\n                    </StyledHeadCellWrapper>\r\n                    {(filterConfig.filter && filterConfig.filterBy === \"address\")\r\n                        ? <FilterInput onChange={(event) => filterWalletsHandling(\"address\", event.target.value)} />\r\n                        : null}\r\n                </StyledHeadCell>\r\n\r\n                <StyledHeadCell>\r\n                    <StyledHeadCellWrapper>\r\n                        <StyledButton onClick={sortByBalance}>\r\n                            Balance\r\n                        <SortButton\r\n                                sorted={sortConfig?.key === \"balance\"}\r\n                            >\r\n                                <FontAwesomeIcon\r\n                                    icon={sortConfig?.key === \"balance\" && sortConfig?.direction === \"descending\"\r\n                                        ? faSortDown\r\n                                        : faSortUp}\r\n                                />\r\n                            </SortButton>\r\n                        </StyledButton>\r\n                        <IconButton onClick={() => { filterConfigHandling(\"balance\") }}>\r\n                            <FilterListButton />\r\n                        </IconButton >\r\n                    </StyledHeadCellWrapper>\r\n                    {(filterConfig.filter && filterConfig.filterBy === \"balance\")\r\n                        ? <FilterInput onChange={(event) => filterWalletsHandling(\"balance\", event.target.value)} />\r\n                        : null}\r\n                </StyledHeadCell>\r\n\r\n                <StyledHeadCell>\r\n                    <StyledHeadCellWrapper>\r\n                        <StyledButton onClick={sortByCreateTime}>\r\n                            Create Time\r\n                        <SortButton\r\n                                sorted={sortConfig?.key === \"create_time\"}\r\n                            >\r\n                                <FontAwesomeIcon\r\n                                    icon={sortConfig?.key === \"create_time\" && sortConfig?.direction === \"descending\"\r\n                                        ? faSortDown\r\n                                        : faSortUp}\r\n                                />\r\n                            </SortButton>\r\n                        </StyledButton>\r\n                        <IconButton onClick={() => { filterConfigHandling(\"create_time\") }}>\r\n                            <FilterListButton />\r\n                        </IconButton>\r\n                    </StyledHeadCellWrapper>\r\n                    {(filterConfig.filter && filterConfig.filterBy === \"create_time\")\r\n                        ? <FilterInput onChange={(event) => filterWalletsHandling(\"create_time\", event.target.value)} />\r\n                        : null}\r\n                </StyledHeadCell>\r\n\r\n                <StyledHeadCell>\r\n                    <StyledHeadCellWrapper>\r\n                        <StyledButton onClick={sortByLastOperation}>\r\n                            Latest Operation Time\r\n                        <SortButton\r\n                                sorted={sortConfig?.key === \"latest_opration_time\"}\r\n                            >\r\n                                <FontAwesomeIcon\r\n                                    icon={sortConfig?.key === \"latest_opration_time\" && sortConfig?.direction === \"descending\"\r\n                                        ? faSortDown\r\n                                        : faSortUp}\r\n                                />\r\n                            </SortButton>\r\n                        </StyledButton>\r\n                        <IconButton onClick={() => { filterConfigHandling(\"latest_opration_time\") }}>\r\n                            <FilterListButton />\r\n                        </IconButton>\r\n                    </StyledHeadCellWrapper>\r\n                    {(filterConfig.filter && filterConfig.filterBy === \"latest_opration_time\")\r\n                        ? <FilterInput onChange={(event) => filterWalletsHandling(\"latest_opration_time\", event.target.value)} />\r\n                        : null}\r\n                </StyledHeadCell>\r\n            </tr>\r\n        </thead>\r\n    );\r\n};\r\n\r\nexport default TableHead;\r\n\r\n","import { useEffect, useRef } from \"react\";\r\n\r\n// usePrevious is custom hook to get previous value of state variable in React function component\r\n\r\nexport const usePrevious = (value) => {\r\n    const ref = useRef();\r\n    useEffect(() => {\r\n        ref.current = value;\r\n    });\r\n    return ref.current;\r\n}","import styled from \"styled-components\";\r\n\r\nexport const StyledCell = styled.td`\r\n    border: 1px solid ${({theme})=>theme.colors.tableCell};\r\n    padding: 10px;\r\n    text-align: center;\r\n\r\n    @media(max-width: ${({theme})=>theme.breakPoints.tabletBreakPoint}){\r\n        font-size: 10px;\r\n    }\r\n`;","import React from \"react\";\r\nimport { StyledCell } from \"./styled\";\r\n\r\nconst TableBody = ({ wallets }) => {\r\n\r\n    //getMyDateString is function which change format of miliseconds from 1970 (it goes from API) to LocalDateString form\r\n\r\n    const getMyDateString = (myDate) => {\r\n        const date = new Date(myDate);\r\n        return date.toLocaleDateString();\r\n    }\r\n\r\n    return (\r\n        <tbody>\r\n            {wallets ? (\r\n                wallets.map((wallet, index) => (\r\n                    <tr key={wallet.address}>\r\n                        <StyledCell>{index + 1}</StyledCell>\r\n                        <StyledCell>{wallet.address}</StyledCell>\r\n                        <StyledCell>{wallet.balance}</StyledCell>\r\n                        <StyledCell>{getMyDateString(wallet.create_time)}</StyledCell>\r\n                        <StyledCell>{getMyDateString(wallet.latest_opration_time)}</StyledCell>\r\n                    </tr>\r\n                ))\r\n            ) : null}\r\n\r\n        </tbody>\r\n    );\r\n};\r\n\r\nexport default TableBody;","import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { StyledTable, Title, TableWrapper } from \"./styled\";\r\nimport TableHead from \"../../molecules/TableHead\";\r\nimport TableBody from \"../../molecules/TableBody\";\r\nimport { sortWallets, selectFilteredWallets, selectSortConfig, resetWallets } from \"../../slices/outputWalletsSlice\";\r\nimport { resetAddresses } from \"../../slices/inputAdressesSlice\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport ArrowBackTwoToneIcon from '@material-ui/icons/ArrowBackTwoTone';\r\nimport Button from \"../../atoms/Button\";\r\n\r\nconst Table = () => {\r\n    //take variables from libraries and state\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const filteredWallets = useSelector(selectFilteredWallets);\r\n    const sortConfig = useSelector(selectSortConfig);\r\n\r\n    //requestSort - return key by which we want to sort values in table and also direction, so if we want sort ascending\r\n    //or descending. Start direction of sorting is ascending and every next change is direction toggle\r\n\r\n    const requestSort = key => {\r\n        let direction = 'ascending';\r\n        if (sortConfig !== null) {\r\n            if (sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n                direction = 'descending';\r\n            }\r\n        }\r\n        return ({ key, direction });\r\n    };\r\n\r\n    //backToFormHandler handles situation when we want go back from table to form - it first reset input old addresses from form\r\n    //then change URL and when it changed URL then reset also wallets from table\r\n\r\n    const backToFormHandler = () => {\r\n        dispatch(resetAddresses());\r\n        history.replace(\"/form\");\r\n        dispatch(resetWallets());\r\n    };\r\n\r\n    return (\r\n        <TableWrapper>\r\n            <StyledTable>\r\n                <Title>TRON Wallets</Title>\r\n                <TableHead\r\n                    sortByAddress={() => { dispatch(sortWallets(requestSort(\"address\"))) }}\r\n                    sortByBalance={() => { dispatch(sortWallets(requestSort(\"balance\"))) }}\r\n                    sortByCreateTime={() => { dispatch(sortWallets(requestSort(\"create_time\"))) }}\r\n                    sortByLastOperation={() => { dispatch(sortWallets(requestSort(\"latest_opration_time\"))) }}\r\n                />\r\n                <TableBody wallets={filteredWallets} />\r\n                <Button\r\n                    startIcon={<ArrowBackTwoToneIcon />}\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        top: \"-5px\",\r\n                        left: 0,\r\n                        height: \"30px\",\r\n                        fontSize: \"12px\",\r\n                    }} onClick={backToFormHandler}\r\n                >\r\n                    Back to form\r\n            </Button>\r\n            </StyledTable>\r\n        </TableWrapper>\r\n\r\n    );\r\n};\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport Background from \"../../atoms/Background\";\r\nimport Table from \"../../organisms/Table\";\r\n\r\n\r\nconst TablePage = () => {\r\n    return (\r\n        <Background>\r\n            <Table />\r\n        </Background >\r\n    );\r\n};\r\n\r\nexport default TablePage;","import React from \"react\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\nimport FormPage from \"./pages/FormPage\";\nimport TablePage from \"./pages/TablePage\";\n\nconst App = () => {\n  return (\n    <BrowserRouter basename=\"Example-TRON-Wallets\">\n      <Switch>\n        <Route path=\"/form\">\n          <FormPage />\n        </Route>\n        <Route path=\"/table\">\n          <TablePage />\n        </Route>\n        <Route>\n          <Redirect to=\"/form\" />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n    html{\r\n        box-sizing: border-box;\r\n        font-family: 'Roboto', sans-serif;\r\n    };\r\n\r\n    *,::after, ::before{\r\n        box-sizing: inherit\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;","export const validateWithAPI = async (address) => {\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  const raw = JSON.stringify({ \"address\": `${address}` });\r\n\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: myHeaders,\r\n    body: raw,\r\n    redirect: 'follow'\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(\"https://api.trongrid.io/wallet/validateaddress\", requestOptions)\r\n    if (!response.ok) {\r\n      throw new Error(response.statusText);\r\n    }\r\n    const jsonResponse = await response.json();\r\n    return jsonResponse;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nexport const getWalletDetailsWithAPI = async (address) => {\r\n  const myHeaders = new Headers();\r\n  myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n  const raw = JSON.stringify({\r\n    \"address\": `${address}`,\r\n    \"visible\": true,\r\n  });\r\n\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: myHeaders,\r\n    body: raw,\r\n    redirect: 'follow'\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(\"https://api.trongrid.io/wallet/getaccount\", requestOptions)\r\n    if (!response.ok) {\r\n      throw new Error(response.statusText);\r\n    }\r\n    const jsonResponse = await response.json();\r\n    return jsonResponse;\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};","import { takeLatest, select, call, put } from \"redux-saga/effects\"\r\nimport { validationStart, selectAddressState, validationMake, setValidationComplete } from \"../slices/inputAdressesSlice\";\r\nimport { fetchWallets } from \"../slices/outputWalletsSlice\";\r\nimport { validateWithAPI } from \"../helpers/apiClient\";\r\n\r\nfunction* validationHandler() {\r\n    const addresses = yield select(selectAddressState);\r\n    for (const address of addresses) {\r\n        const validate = yield call(validateWithAPI, address.address);\r\n        yield put(validationMake({\r\n            id: address.id,\r\n            validationResult: validate.result,\r\n            validationMessage: validate.message,\r\n        }))\r\n    };\r\n\r\n    const addressesAfterValidationMake = yield select(selectAddressState);\r\n    const validationCompleteChecker = (adresses) => {\r\n        return adresses.every(address => address.validationResult === true);\r\n    };\r\n    const validationCompleteCheck = yield call(validationCompleteChecker, addressesAfterValidationMake);\r\n\r\n    if (validationCompleteCheck) {\r\n        yield put(setValidationComplete());\r\n        yield put(fetchWallets());\r\n    };\r\n};\r\n\r\nexport function* validationSaga() {\r\n    yield takeLatest(validationStart.type, validationHandler);\r\n};\r\n\r\n\r\n\r\n","import { takeLatest, select, call, put } from \"redux-saga/effects\"\r\nimport { selectAddressState } from \"../slices/inputAdressesSlice\";\r\nimport { fetchWallets, fetchWalletSuccess } from \"../slices/outputWalletsSlice\";\r\nimport { getWalletDetailsWithAPI } from \"../helpers/apiClient\";\r\n\r\nfunction* fetchWalletsHandler() {\r\n    const addresses = yield select(selectAddressState);\r\n    for (const address of addresses) {\r\n        const walletDetails = yield call(getWalletDetailsWithAPI, address.address);\r\n\r\n        //Get balance 0 if it doesn't exist in fetched wallet\r\n        if (!walletDetails.balance) {\r\n            walletDetails.balance = 0;\r\n        }\r\n        yield put(fetchWalletSuccess(walletDetails));\r\n    };\r\n};\r\n\r\nexport function* fetchWalletsSaga() {\r\n    yield takeLatest(fetchWallets.type, fetchWalletsHandler);\r\n};\r\n\r\n\r\n\r\n","import { all } from \"redux-saga/effects\";\r\nimport { validationSaga } from \"./validationSaga\";\r\nimport { fetchWalletsSaga } from \"./fetchWalletsSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        validationSaga(),\r\n        fetchWalletsSaga(),\r\n    ]);\r\n};","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport inputAddressesSlice from \"./slices/inputAdressesSlice\";\r\nimport outputWalletsSlice from \"./slices/outputWalletsSlice\";\r\nimport createSaga from \"redux-saga\";\r\nimport rootSaga from \"./sagas/rootSaga\";\r\n\r\nconst sagaMiddleware = createSaga();\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        inputAddresses: inputAddressesSlice,\r\n        wallets: outputWalletsSlice,\r\n    },\r\n    middleware: [sagaMiddleware]\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport GlobalStyle from \"./theme/GlobalStyle\";\nimport { theme } from \"./theme/theme\";\nimport { store } from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","export const theme = {\r\n    colors: {\r\n        filter: \"rgba(20, 20, 20, 0.7)\",\r\n        formBorder: \"#23B6DB\",\r\n        tableCell: \"#23B6DB\",\r\n        tableHeadCell: \"#23B6DB\",\r\n        tableHeadText: \"#FFFFFF\",\r\n        tableTitle: \"#FFFFFF\",\r\n        tableCellText: \"#FFFFFF\",\r\n    },\r\n    \r\n    breakPoints: {\r\n        tabletBreakPoint: \"1020px\",\r\n    },\r\n};"],"sourceRoot":""}